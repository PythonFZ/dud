<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CLI Reference on Dud</title><link>https://kevin-hanselman.github.io/dud/cli/</link><description>Recent content in CLI Reference on Dud</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kevin-hanselman.github.io/dud/cli/index.xml" rel="self" type="application/rss+xml"/><item><title>dud</title><link>https://kevin-hanselman.github.io/dud/cli/dud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud/</guid><description> dud # Synopsis # Dud is a lightweight tool for versioning data alongside source code and building data pipelines.
Options # -h, --help help for dud --profile enable profiling --trace enable tracing -v, --verbose increase output verbosity SEE ALSO # dud checkout - Load committed artifacts from the cache dud checksum - Checksum files or bytes from STDIN dud commit - Save artifacts to the cache and record their checksums dud completion - Generate shell completion script dud config - Print or modify fields in the config file dud fetch - Fetch committed artifacts from the remote cache dud graph - Print the stage graph in graphviz DOT format dud init - Initialize a Dud project dud pull - Fetch artifacts from the remote and checkout dud push - Push committed artifacts to the remote cache dud run - Run stages or pipelines dud stage - Commands for interacting with stages and the index dud status - Print the state of one or more stages dud version - Print the version number and exit</description></item><item><title>dud checkout</title><link>https://kevin-hanselman.github.io/dud/cli/dud_checkout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_checkout/</guid><description>dud checkout # Load committed artifacts from the cache
Synopsis # Checkout loads previously committed artifacts from the cache.
For each stage file passed in, checkout makes the stage&amp;rsquo;s output artifacts available in the workspace. By default, checkout creates symlinks to the cache, but copies of the cached artifacts can be checked out using &amp;ndash;copy. If no stage files are passed in, checkout will act on all stages in the index.</description></item><item><title>dud checksum</title><link>https://kevin-hanselman.github.io/dud/cli/dud_checksum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_checksum/</guid><description> dud checksum # Checksum files or bytes from STDIN
Synopsis # Checksum reads files (or bytes from STDIN) and prints their checksums.
The CLI is intended to be compatible with the *sum family of command-line tools (although this version is currently incomplete).
dud checksum [flags] [file]... Options # -b, --bufsize int internal buffer size in bytes -h, --help help for checksum Options inherited from parent commands # --profile enable profiling --trace enable tracing -v, --verbose increase output verbosity SEE ALSO # dud -</description></item><item><title>dud commit</title><link>https://kevin-hanselman.github.io/dud/cli/dud_commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_commit/</guid><description>dud commit # Save artifacts to the cache and record their checksums
Synopsis # Commit saves artifacts to the cache and record their checksums.
For each stage file passed in, commit saves all output artifacts in the cache and records their checksums in the stage file. If no stage files are passed in, commit will act on all stages in the index. By default, commit will act recursively on all stages upstream of the given stage(s).</description></item><item><title>dud completion</title><link>https://kevin-hanselman.github.io/dud/cli/dud_completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_completion/</guid><description>dud completion # Generate shell completion script
Synopsis # Completion generates a completion script for the given shell.
Bash # $ source &amp;lt;(dud completion bash) To load completions for each session, execute once:
On Linux:
$ dud completion bash &amp;gt; /etc/bash_completion.d/dud On MacOS:
$ dud completion bash &amp;gt; /usr/local/etc/bash_completion.d/dud Zsh # If shell completion is not already enabled in your environment you will need to enable it. You can execute the following once:</description></item><item><title>dud config</title><link>https://kevin-hanselman.github.io/dud/cli/dud_config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_config/</guid><description> dud config # Print or modify fields in the config file
Synopsis # Config prints or modifies fields in the config file
Options # -h, --help help for config Options inherited from parent commands # --profile enable profiling --trace enable tracing -v, --verbose increase output verbosity SEE ALSO # dud - dud config get - Get the value of a field in the config file dud config path - Print the config file path dud config set - Set the value of a field in the config file</description></item><item><title>dud config get</title><link>https://kevin-hanselman.github.io/dud/cli/dud_config_get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_config_get/</guid><description> dud config get # Get the value of a field in the config file
Synopsis # Get the value of a field in the config file
dud config get &amp;lt;config_field&amp;gt; [flags] Options # -h, --help help for get Options inherited from parent commands # --profile enable profiling --trace enable tracing -v, --verbose increase output verbosity SEE ALSO # dud config - Print or modify fields in the config file</description></item><item><title>dud config path</title><link>https://kevin-hanselman.github.io/dud/cli/dud_config_path/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_config_path/</guid><description> dud config path # Print the config file path
Synopsis # Print the config file path
dud config path [flags] Options # -h, --help help for path -u, --user target the user-level config file Options inherited from parent commands # --profile enable profiling --trace enable tracing -v, --verbose increase output verbosity SEE ALSO # dud config - Print or modify fields in the config file</description></item><item><title>dud config set</title><link>https://kevin-hanselman.github.io/dud/cli/dud_config_set/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_config_set/</guid><description> dud config set # Set the value of a field in the config file
Synopsis # Set the value of a field in the config file
dud config set &amp;lt;config_field&amp;gt; &amp;lt;new_value&amp;gt; [flags] Options # -h, --help help for set -u, --user target the user-level config file Options inherited from parent commands # --profile enable profiling --trace enable tracing -v, --verbose increase output verbosity SEE ALSO # dud config - Print or modify fields in the config file</description></item><item><title>dud fetch</title><link>https://kevin-hanselman.github.io/dud/cli/dud_fetch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_fetch/</guid><description>dud fetch # Fetch committed artifacts from the remote cache
Synopsis # Fetch downloads previously committed artifacts from a remote cache.
For each stage passed in, fetch downloads the stage&amp;rsquo;s committed outputs from the remote cache specified in the Dud config file. If no stage files are passed in, fetch will act on all stages in the index. By default, fetch will act recursively on all stages upstream of the given stage(s).</description></item><item><title>dud graph</title><link>https://kevin-hanselman.github.io/dud/cli/dud_graph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_graph/</guid><description>dud graph # Print the stage graph in graphviz DOT format
Synopsis # Graph prints the stage graph in graphviz DOT format.
For each stage file passed in, graph will print the graph of the stage and all upstream stages in Graphviz DOT format. If no stage files are passed in, graph will act on all stages in the index.
You can pipe the output of this command to &amp;lsquo;dot&amp;rsquo; from the graphviz package to generate images of the stage graph.</description></item><item><title>dud init</title><link>https://kevin-hanselman.github.io/dud/cli/dud_init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_init/</guid><description> dud init # Initialize a Dud project
Synopsis # Init initializes a Dud project in the current directory.
dud init [flags] Options # -h, --help help for init Options inherited from parent commands # --profile enable profiling --trace enable tracing -v, --verbose increase output verbosity SEE ALSO # dud -</description></item><item><title>dud pull</title><link>https://kevin-hanselman.github.io/dud/cli/dud_pull/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_pull/</guid><description> dud pull # Fetch artifacts from the remote and checkout
Synopsis # Pull runs fetch followed by checkout.
This command requires rclone to be installed on your machine. Visit https://rclone.org/ for more information and installation instructions.
dud pull [flags] [stage_file]... Options # -c, --copy copy artifacts instead of linking -h, --help help for pull -s, --single-stage don&amp;#39;t operate recursively over Stage inputs Options inherited from parent commands # --profile enable profiling --trace enable tracing -v, --verbose increase output verbosity SEE ALSO # dud -</description></item><item><title>dud push</title><link>https://kevin-hanselman.github.io/dud/cli/dud_push/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_push/</guid><description>dud push # Push committed artifacts to the remote cache
Synopsis # Push uploads previously committed artifacts to a remote cache.
For each stage passed in, push uploads the stage&amp;rsquo;s committed outputs to the remote cache specified in the Dud config file. If no stage files are passed in, push will act on all stages in the index. By default, push will act recursively on all stages upstream of the given stage(s).</description></item><item><title>dud run</title><link>https://kevin-hanselman.github.io/dud/cli/dud_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_run/</guid><description>dud run # Run stages or pipelines
Synopsis # Run runs stages or pipelines.
For each stage passed in, run executes a stage&amp;rsquo;s command if it is out-of-date. If no stage files are passed in, run will act on all stages in the index. By default, run will act recursively on all stages upstream of the given stage, and thus run will execute a stage&amp;rsquo;s command if any upstream stages are out-of-date.</description></item><item><title>dud stage</title><link>https://kevin-hanselman.github.io/dud/cli/dud_stage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_stage/</guid><description>dud stage # Commands for interacting with stages and the index
Synopsis # Stage is a group of commands for interacting with stages and the index.
A Stage is a group of Artifacts, or an operation that consumes and/or produces a group of Artifacts. Stages are defined by the user in YAML files and should be tracked with source control.
Below is a fully-annotated Stage YAML file for reference.</description></item><item><title>dud stage add</title><link>https://kevin-hanselman.github.io/dud/cli/dud_stage_add/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_stage_add/</guid><description> dud stage add # Add one or more stage files to the index
Synopsis # Add adds one or more stage files to the index.
Add loads each stage file passed on the command line, validates its contents, checks if it conflicts with any stages already in the index, then adds the stage to the index file.
dud stage add stage_file... [flags] Options # -h, --help help for add Options inherited from parent commands # --profile enable profiling --trace enable tracing -v, --verbose increase output verbosity SEE ALSO # dud stage - Commands for interacting with stages and the index</description></item><item><title>dud stage gen</title><link>https://kevin-hanselman.github.io/dud/cli/dud_stage_gen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_stage_gen/</guid><description> dud stage gen # Generate stage YAML using the CLI
Synopsis # Gen generates stage YAML and prints it to standard output.
The output of this command can be redirected to a file and modified further as needed.
dud stage gen [flags] [--] [stage_command]... Examples # dud stage gen -o data/ python download_data.py &amp;gt; download.yaml Options # -h, --help help for gen -i, --in strings one or more input files or directories -o, --out strings one or more output files or directories -w, --work-dir string working directory for the stage&amp;#39;s command Options inherited from parent commands # --profile enable profiling --trace enable tracing -v, --verbose increase output verbosity SEE ALSO # dud stage - Commands for interacting with stages and the index</description></item><item><title>dud stage remove</title><link>https://kevin-hanselman.github.io/dud/cli/dud_stage_remove/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_stage_remove/</guid><description> dud stage remove # Remove one or more stage files from the index
Synopsis # Remove removes one or more stage files from the index.
dud stage remove stage_file... [flags] Options # -h, --help help for remove Options inherited from parent commands # --profile enable profiling --trace enable tracing -v, --verbose increase output verbosity SEE ALSO # dud stage - Commands for interacting with stages and the index</description></item><item><title>dud status</title><link>https://kevin-hanselman.github.io/dud/cli/dud_status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_status/</guid><description>dud status # Print the state of one or more stages
Synopsis # Status prints the state of one or more stages.
For each stage file passed in, status will print the current state of the stage. If no stage files are passed in, status will act on all stages in the index. By default, status will act recursively on all stages upstream of the given stage(s).
dud status [flags] [stage_file].</description></item><item><title>dud version</title><link>https://kevin-hanselman.github.io/dud/cli/dud_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevin-hanselman.github.io/dud/cli/dud_version/</guid><description> dud version # Print the version number and exit
dud version [flags] Options # -h, --help help for version Options inherited from parent commands # --profile enable profiling --trace enable tracing -v, --verbose increase output verbosity SEE ALSO # dud -</description></item></channel></rss>